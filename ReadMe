Documentation du Projet

1. Introduction

Ce projet est un moteur de recherche bas√© sur des mod√®les de calcul tels que TF-IDF et BM25, appliqu√© sur des corpus contenant des documents textuels. Il inclut des fonctionnalit√©s pour traiter des requ√™tes utilisateurs et √©valuer la pertinence des documents, tout en g√©rant les exceptions.

2. Membres du Groupe

	‚Ä¢	MEFTAH Zineb : L2 Informatique G2
Identit√© : 2500231
	‚Ä¢	MEDJBER Syphax : L2 Informatique G2
Identit√© : 2500230

3. Structure G√©n√©rale

Modules Principaux

	1.	Model :
	‚Ä¢	Contient les classes repr√©sentant les √©l√©ments de base du projet (e.g., Document, Mot, Vocabulary, etc.).
	2.	Engine :
	‚Ä¢	Fournit les classes pour traiter les corpus et calculer des scores avec TF-IDF et BM25.
	3.	Exceptions :
	‚Ä¢	D√©finit les exceptions personnalis√©es pour g√©rer les erreurs sp√©cifiques au projet.

R√©sum√© des Fonctionnalit√©s

	‚Ä¢	Pr√©traitement des donn√©es :
	‚Ä¢	Conversion des mots en minuscules.
	‚Ä¢	Racinisation via l‚Äôalgorithme Porter Stemmer.
	‚Ä¢	Gestion des mots vides (stop words).
	‚Ä¢	Calcul des scores :
	‚Ä¢	Impl√©mentation des mod√®les TF-IDF et BM25.
	‚Ä¢	Gestion des exceptions :
	‚Ä¢	Prise en charge des erreurs sp√©cifiques via des classes d‚Äôexception d√©di√©es.

4. Classes et Fonctions Importantes

4.1. Gestion des Documents

	‚Ä¢	Mot :
	‚Ä¢	Repr√©sente un mot normalis√© (minuscule + racinisation).
	‚Ä¢	Impl√©mente equals et hashCode pour comparer efficacement les mots.
	‚Ä¢	Document :
	‚Ä¢	Repr√©sente un document contenant un titre et une liste de mots.
	‚Ä¢	M√©thodes cl√©s :
	‚Ä¢	putMot(String mot) : Ajoute un mot au document.
	‚Ä¢	toString() : G√©n√®re une repr√©sentation textuelle du document.

4.2. Gestion des Corpus

	‚Ä¢	Corpus :
	‚Ä¢	Repr√©sente un ensemble de documents.
	‚Ä¢	Fonctionnalit√©s :
	‚Ä¢	Lecture d‚Äôun fichier texte pour charger les documents.
	‚Ä¢	Gestion des mots vides et des mots racinis√©s.
	‚Ä¢	M√©thodes cl√©s :
	‚Ä¢	addDocument(String title, String content) : Ajoute un document apr√®s traitement des mots.
	‚Ä¢	getFeatures(Calculation model) : Applique un mod√®le de calcul sur le corpus.

4.3. Mod√®les de Calcul

	‚Ä¢	Calculation (classe abstraite) :
	‚Ä¢	Classe de base pour les mod√®les TF-IDF et BM25.
	‚Ä¢	M√©thodes cl√©s :
	‚Ä¢	processCorpus(Corpus corpus) : Traite un corpus pour calculer les fr√©quences des termes et les valeurs IDF.
	‚Ä¢	processQuery(String requ√™te, int maxDoc) : Traite une requ√™te utilisateur et retourne les documents les plus pertinents.
	‚Ä¢	TfIdf :
	‚Ä¢	Impl√©mente le calcul des scores TF-IDF.
	‚Ä¢	Bm25 :
	‚Ä¢	Impl√©mente le calcul des scores BM25.
	‚Ä¢	Param√®tres de r√©glage :
	‚Ä¢	k1 et b pour ajuster la saturation et la normalisation de la longueur des documents.

4.4. Exceptions Personnalis√©es

	‚Ä¢	MoteurRechercheException :
	‚Ä¢	Classe de base pour toutes les exceptions du projet.
	‚Ä¢	Affiche la hi√©rarchie de l‚Äôexception et un message clair.
	‚Ä¢	Exceptions sp√©cialis√©es :
	‚Ä¢	CorpusException : Lev√©e si le corpus est invalide (chemin nul ou vide).
	‚Ä¢	TfIdfException : Lev√©e si le corpus pour TF-IDF est nul ou vide.
	‚Ä¢	Bm25Exception : Lev√©e si la requ√™te pour BM25 est nulle ou vide.

5. Points Cl√©s

5.1. Gestion des Mots

	‚Ä¢	Normalisation :
	‚Ä¢	Les mots sont convertis en minuscules pour assurer une coh√©rence.
	‚Ä¢	Racinisation via l‚Äôalgorithme Porter Stemmer.
	‚Ä¢	Gestion des mots vides :
	‚Ä¢	Une liste de mots vides (stopList) est charg√©e depuis un fichier (stopList.txt) pour exclure les mots non pertinents.

5.2. Gestion des Corpus

	‚Ä¢	Les documents sont lus √† partir de fichiers texte (e.g., WIKIPEDIA.txt, BOOK.txt).
	‚Ä¢	Utilisation partielle des datasets :
	‚Ä¢	√âtant donn√© la taille importante des datasets initiaux, seules certaines parties des fichiers ont √©t√© utilis√©es pour les tests.

5.3. Calcul des Scores

	‚Ä¢	TF-IDF :
	‚Ä¢	Bas√© sur les fr√©quences des termes et les valeurs IDF.
	‚Ä¢	BM25 :
	‚Ä¢	Ajuste les scores en fonction de la longueur des documents et de la fr√©quence des termes.
	‚Ä¢	Plus flexible gr√¢ce aux param√®tres k1 et b.

5.4. Gestion des Exceptions

	‚Ä¢	Chaque classe d‚Äôexception fournit un message descriptif et peut afficher sa hi√©rarchie via toString().
	‚Ä¢	Les exceptions sont lev√©es pour des cas sp√©cifiques, comme :
	‚Ä¢	Corpus nul ou vide.
	‚Ä¢	Requ√™te utilisateur invalide.

6. Conclusion

Ce projet met en ≈ìuvre un moteur de recherche performant avec :
	1.	Gestion des mots et des corpus.
	2.	Calcul des scores avec TF-IDF et BM25.
	3.	Gestion robuste des erreurs gr√¢ce aux exceptions personnalis√©es.

Le code est modulaire, bien structur√©, et respecte les bonnes pratiques Java. Il est pr√™t √† √™tre test√© et utilis√© pour des cas r√©els de recherche d‚Äôinformation.

Remerciements 

Merci √† notre enseignant MORCHID Mohamed pour les conseils et les exigences qui ont guid√© ce projet. üòä